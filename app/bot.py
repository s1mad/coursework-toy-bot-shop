# ./app/bot.py

import random
import pickle
import os
import logging
import traceback
from enum import Enum
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import speech_recognition as sr
from gtts import gTTS
from pydub import AudioSegment
from dotenv import load_dotenv
from data.config import CONFIG
from sklearn.metrics.pairwise import cosine_similarity
from utils import clear_phrase, is_meaningful_text, extract_age, extract_toy_name, extract_toy_category, extract_price, \
    is_age_in_range, Stats, logger, lemmatize_phrase, analyze_sentiment
from rapidfuzz import process, fuzz

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv('TELEGRAM_TOKEN')


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotState(Enum):
    NONE = "NONE"
    WAITING_FOR_TOY = "WAITING_FOR_TOY"
    WAITING_FOR_AGE = "WAITING_FOR_AGE"
    WAITING_FOR_INTENT = "WAITING_FOR_INTENT"


# –ù–∞–º–µ—Ä–µ–Ω–∏—è
class Intent(Enum):
    HELLO = "hello"
    BYE = "bye"
    YES = "yes"
    NO = "no"
    TOY_TYPES = "toy_types"
    TOY_PRICE = "toy_price"
    TOY_AVAILABILITY = "toy_availability"
    TOY_RECOMMENDATION = "toy_recommendation"
    FILTER_TOYS = "filter_toys"
    TOY_INFO = "toy_info"
    ORDER_TOY = "order_toy"
    COMPARE_TOYS = "compare_toys"


# –¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
class ResponseType(Enum):
    INTENT = "intent"
    GENERATE = "generate"
    FAILURE = "failure"


# –ö–ª–∞—Å—Å –±–æ—Ç–∞
class Bot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π."""
        try:
            with open('models/intent_model.pkl', 'rb') as f:
                self.clf = pickle.load(f)
            with open('models/intent_vectorizer.pkl', 'rb') as f:
                self.vectorizer = pickle.load(f)
            with open('models/dialogues_vectorizer.pkl', 'rb') as f:
                self.tfidf_vectorizer = pickle.load(f)
            with open('models/dialogues_matrix.pkl', 'rb') as f:
                self.tfidf_matrix = pickle.load(f)
            with open('models/dialogues_answers.pkl', 'rb') as f:
                self.answers = pickle.load(f)
        except FileNotFoundError as e:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏: {e}\n{traceback.format_exc()}")
            raise

    def _update_context(self, context, replica, answer, intent=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        context.user_data.setdefault('state', BotState.NONE.value)
        context.user_data.setdefault('current_toy', None)
        context.user_data.setdefault('last_bot_response', None)
        context.user_data.setdefault('last_intent', None)
        context.user_data.setdefault('history', [])

        context.user_data['history'].append(replica)
        context.user_data['history'] = context.user_data['history'][-CONFIG['history_limit']:]
        context.user_data['last_bot_response'] = answer
        if intent:
            context.user_data['last_intent'] = intent

    def classify_intent(self, replica):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized:
            return None
        vectorized = self.vectorizer.transform([replica_lemmatized])
        intent = self.clf.predict(vectorized)[0]
        best_score = 0
        best_intent = None
        for intent_key, data in CONFIG['intents'].items():
            examples = [lemmatize_phrase(ex) for ex in data.get('examples', []) if lemmatize_phrase(ex)]
            if not examples:
                continue
            match = process.extractOne(replica_lemmatized, examples, scorer=fuzz.ratio)
            if match and match[1] / 100 > best_score and match[1] / 100 >= CONFIG['thresholds']['intent_score']:
                best_score = match[1] / 100
                best_intent = intent_key
        logger.info(
            f"Classify intent: replica='{replica_lemmatized}', predicted='{intent}', best_intent='{best_intent}', score={best_score}")
        return best_intent or intent if best_score >= CONFIG['thresholds']['intent_score'] else None

    def _get_toy_response(self, intent, toy_name, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—É—à–∫–æ–π."""
        if toy_name not in CONFIG['toys']:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∏–≥—Ä—É—à–∫–∏ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
        responses = CONFIG['intents'][intent]['responses']
        answer = random.choice(responses)
        toy_data = CONFIG['toys'][toy_name]
        answer = answer.replace('[toy_name]', toy_name)
        answer = answer.replace('[price]', str(toy_data['price']))
        answer = answer.replace('[age]', f"{toy_data['age']['min_age']}-{toy_data['age']['max_age'] or '–∏ —Å—Ç–∞—Ä—à–µ'}")
        answer = answer.replace('[description]', toy_data.get('description', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–≥—Ä—É—à–∫–∞'))

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –†–∞–¥, —á—Ç–æ –≤—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
        elif sentiment == 'negative':
            answer += " –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤ –¥—É—Ö–µ. –ú–æ–∂–µ—Ç, –∏–≥—Ä—É—à–∫–∞ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòä"

        return f"{answer} –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    def _find_toy_by_context(self, replica, context):
        """–ò—â–µ—Ç –∏–≥—Ä—É—à–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        last_response = context.user_data.get('last_bot_response', '')
        last_intent = context.user_data.get('last_intent', '')
        toy_category = extract_toy_category(replica)

        if last_response and '–ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å' in last_response:
            return extract_toy_name(last_response)
        elif toy_category:
            suitable_toys = [toy for toy, data in CONFIG['toys'].items() if toy_category in data.get('categories', [])]
            return random.choice(suitable_toys) if suitable_toys else None
        elif last_intent == Intent.TOY_TYPES.value:
            for hist in context.user_data.get('history', [])[::-1]:
                hist_toy = extract_toy_name(hist)
                if hist_toy:
                    return hist_toy
                hist_category = extract_toy_category(hist)
                if hist_category:
                    suitable_toys = [toy for toy, data in CONFIG['toys'].items() if
                                     hist_category in data.get('categories', [])]
                    if suitable_toys:
                        return random.choice(suitable_toys)
        return None

    def _handle_filter_toys(self, age, price, toy_category, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏–≥—Ä—É—à–µ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, —Ü–µ–Ω–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        suitable_toys = [
            toy for toy, data in CONFIG['toys'].items()
            if (not age or is_age_in_range(age, data['age']))
               and (not price or data['price'] <= price)
               and (not toy_category or toy_category in data.get('categories', []))
        ]
        recent_toys = [extract_toy_name(h) for h in context.user_data.get('history', [])]
        suitable_toys = [t for t in suitable_toys if t not in recent_toys]

        if not suitable_toys:
            conditions = []
            if age:
                conditions.append(f"–≤–æ–∑—Ä–∞—Å—Ç–∞ {age} –ª–µ—Ç")
            if price:
                conditions.append(f"–¥–æ {price} —Ä—É–±–ª–µ–π")
            if toy_category:
                conditions.append(f"–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {toy_category}")
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –∏–≥—Ä—É—à–µ–∫ –¥–ª—è {', '.join(conditions)}."

        toys_list = ', '.join(suitable_toys)
        if age and not price and not toy_category:
            toy_name = random.choice(suitable_toys)
            context.user_data['current_toy'] = toy_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            return f"–î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ {age} –ª–µ—Ç —Å–æ–≤–µ—Ç—É—é {toy_name}! –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ?"
        return f"–í–æ—Ç —á—Ç–æ –Ω–∞—à–ª–æ—Å—å: {toys_list}."

    def get_answer_by_intent(self, intent, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è."""
        toy_name = context.user_data.get('current_toy')
        last_intent = context.user_data.get('last_intent', '')
        toy_category = extract_toy_category(replica)
        age = extract_age(replica)
        price = extract_price(replica)

        if intent not in CONFIG['intents']:
            return None
        responses = CONFIG['intents'][intent]['responses']
        if not responses:
            return None
        answer = random.choice(responses)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        sentiment = analyze_sentiment(replica)
        sentiment_suffix = ""
        if sentiment == 'positive':
            sentiment_suffix = " –†–∞–¥, —á—Ç–æ –≤—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
        elif sentiment == 'negative':
            sentiment_suffix = " –ö–∞–∂–µ—Ç—Å—è, –≤—ã –Ω–µ –≤ –¥—É—Ö–µ. –î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä—ë–º —á—Ç–æ-—Ç–æ –≤–µ—Å—ë–ª–æ–µ! üòä"

        if intent in [Intent.TOY_PRICE.value, Intent.TOY_AVAILABILITY.value, Intent.TOY_INFO.value,
                      Intent.ORDER_TOY.value]:
            if not toy_name:
                toy_name = self._find_toy_by_context(replica, context)
                if toy_name:
                    context.user_data['current_toy'] = toy_name
                    context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                    return f"–ò–∑ {toy_category or '–∏–≥—Ä—É—à–µ–∫'} –µ—Å—Ç—å {toy_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{sentiment_suffix}"
                context.user_data['state'] = BotState.WAITING_FOR_TOY.value
                return f"–ö–∞–∫—É—é –∏–≥—Ä—É—à–∫—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É?{sentiment_suffix}"
            return self._get_toy_response(intent, toy_name, replica, context)

        elif intent == Intent.TOY_RECOMMENDATION.value:
            if age:
                answer = self._handle_filter_toys(age, None, toy_category, context)
            else:
                context.user_data['state'] = BotState.WAITING_FOR_AGE.value
                return f"–î–ª—è –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω—É–∂–Ω–∞ –∏–≥—Ä—É—à–∫–∞?{sentiment_suffix}"

        elif intent == Intent.FILTER_TOYS.value:
            if age or price or toy_category:
                answer = self._handle_filter_toys(age, price, toy_category, context)
            else:
                return f"–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç, —Ü–µ–Ω—É –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.{sentiment_suffix}"

        elif intent == Intent.TOY_TYPES.value:
            categories = random.sample([cat for toy in CONFIG['toys'].values() for cat in toy.get('categories', [])],
                                       min(3, len(CONFIG['toys'])))
            toys = random.sample(list(CONFIG['toys'].keys()), min(2, len(CONFIG['toys'])))
            answer = f"–£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(set(categories))} –∏ –∏–≥—Ä—É—à–∫–∏ –≤—Ä–æ–¥–µ {', '.join(toys)}. –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?{sentiment_suffix}"
            context.user_data['current_toy'] = None

        elif intent == Intent.COMPARE_TOYS.value:
            toy1 = random.choice(list(CONFIG['toys'].keys()))
            toy2 = random.choice([t for t in CONFIG['toys'].keys() if t != toy1])
            answer = answer.replace('[toy1]', toy1).replace('[toy2]', toy2)
            context.user_data['current_toy'] = toy1
            answer += f" –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: {toy1} –∏–ª–∏ {toy2}?{sentiment_suffix}"

        elif intent == Intent.YES.value:
            if last_intent == Intent.HELLO.value:
                categories = random.sample(
                    [cat for toy in CONFIG['toys'].values() for cat in toy.get('categories', [])],
                    min(3, len(CONFIG['toys'])))
                answer = f"–û—Ç–ª–∏—á–Ω–æ! –£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(set(categories))}. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?{sentiment_suffix}"
            elif last_intent in [Intent.TOY_PRICE.value, Intent.TOY_INFO.value, Intent.TOY_AVAILABILITY.value,
                                 Intent.ORDER_TOY.value]:
                if toy_name:
                    answer = f"–¶–µ–Ω–∞ –Ω–∞ {toy_name} ‚Äî {CONFIG['toys'][toy_name]['price']} —Ä—É–±–ª–µ–π. –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?{sentiment_suffix}"
                else:
                    answer = f"–ù–∞–∑–æ–≤–∏ –∏–≥—Ä—É—à–∫—É, —á—Ç–æ–±—ã —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø–æ–¥—Ä–æ–±–Ω–µ–µ!{sentiment_suffix}"
            elif last_intent == Intent.TOY_TYPES.value:
                toys = random.sample(list(CONFIG['toys'].keys()), min(2, len(CONFIG['toys'])))
                answer = f"–£ –Ω–∞—Å –µ—Å—Ç—å {', '.join(toys)}. –ù–∞–∑–æ–≤–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!{sentiment_suffix}"
            elif last_intent == 'offtopic':
                answer = f"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∏–≥—Ä—É—à–∫–∏?{sentiment_suffix}"
            else:
                answer = f"–•–æ—Ä–æ—à–æ, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ò–≥—Ä—É—à–∫–∏, —Ü–µ–Ω—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë?{sentiment_suffix}"

        elif intent == Intent.NO.value:
            context.user_data['current_toy'] = None
            context.user_data['state'] = BotState.NONE.value
            answer = f"–•–æ—Ä–æ—à–æ, –∫–∞–∫—É—é –∏–≥—Ä—É—à–∫—É –æ–±—Å—É–¥–∏–º —Ç–µ–ø–µ—Ä—å?{sentiment_suffix}"

        if intent in [Intent.HELLO.value, Intent.TOY_TYPES.value] and random.random() < 0.2:
            ad_toy = random.choice([t for t in CONFIG['toys'].keys() if t != toy_name])
            answer += f" –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å {ad_toy} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –¥–µ—Ç–µ–π {CONFIG['toys'][ad_toy]['age']['min_age']}-{CONFIG['toys'][ad_toy]['age']['max_age'] or '–∏ —Å—Ç–∞—Ä—à–µ'}!{sentiment_suffix}"

        context.user_data['last_intent'] = intent
        return answer

    def generate_answer(self, replica, context):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–æ–≤."""
        replica_lemmatized = lemmatize_phrase(replica)
        if not replica_lemmatized or not self.answers:
            return None
        if not is_meaningful_text(replica):
            return None
        replica_vector = self.tfidf_vectorizer.transform([replica_lemmatized])
        similarities = cosine_similarity(replica_vector, self.tfidf_matrix).flatten()
        best_idx = similarities.argmax()
        if similarities[best_idx] > CONFIG['thresholds']['dialogues_similarity']:
            answer = self.answers[best_idx]
            logger.info(
                f"Found in dialogues.txt: replica='{replica_lemmatized}', answer='{answer}', similarity={similarities[best_idx]}")
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            sentiment = analyze_sentiment(replica)
            if sentiment == 'positive':
                answer += " –†–∞–¥, —á—Ç–æ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä"
            elif sentiment == 'negative':
                answer += " –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤ –¥—É—Ö–µ. –ú–æ–∂–µ—Ç, –∏–≥—Ä—É—à–∫–∞ –ø–æ–¥–Ω–∏–º–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? üòä"
            if random.random() < 0.3:
                ad_toy = random.choice(list(CONFIG['toys'].keys()))
                answer += f" –ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –µ—Å—Ç—å {ad_toy} ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –¥–µ—Ç–µ–π {CONFIG['toys'][ad_toy]['age']['min_age']}-{CONFIG['toys'][ad_toy]['age']['max_age'] or '–∏ —Å—Ç–∞—Ä—à–µ'}!"
            context.user_data['last_intent'] = 'offtopic'
            return answer
        logger.info(f"No match in dialogues.txt for replica='{replica_lemmatized}'")
        return None

    def get_failure_phrase(self, replica):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—Ä–∞–∑—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        toy_name = random.choice(list(CONFIG['toys'].keys()))
        answer = random.choice(CONFIG['failure_phrases']).replace('[toy_name]', toy_name)
        sentiment = analyze_sentiment(replica)
        if sentiment == 'positive':
            answer += " –¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –¥–∞–≤–∞–π –Ω–∞–π–¥–µ–º –∫—Ä—É—Ç—É—é –∏–≥—Ä—É—à–∫—É! üòä"
        elif sentiment == 'negative':
            answer += " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –¥–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! üòä"
        return answer

    def _process_none_state(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ NONE."""
        toy_name = extract_toy_name(replica)
        if toy_name:
            context.user_data['current_toy'] = toy_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            sentiment = analyze_sentiment(replica)
            suffix = " –†–∞–¥, —á—Ç–æ —Ç—ã –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä" if sentiment == 'positive' else " –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ –≤ –¥—É—Ö–µ. –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ? üòä" if sentiment == 'negative' else ""
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {toy_name}? –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{suffix}"

        toy_category = extract_toy_category(replica)
        if toy_category:
            suitable_toys = [toy for toy, data in CONFIG['toys'].items() if toy_category in data.get('categories', [])]
            if suitable_toys:
                toy_name = random.choice(suitable_toys)
                context.user_data['current_toy'] = toy_name
                context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                sentiment = analyze_sentiment(replica)
                suffix = " –¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–µ! üòä" if sentiment == 'negative' else ""
                return f"–ò–∑ {toy_category} –µ—Å—Ç—å {toy_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{suffix}"
            sentiment = analyze_sentiment(replica)
            suffix = " –í —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é! üòä" if sentiment == 'negative' else ""
            return f"–£ –Ω–∞—Å –Ω–µ—Ç –∏–≥—Ä—É—à–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {toy_category}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!{suffix}"

        intent = self.classify_intent(replica)
        if intent:
            return self.get_answer_by_intent(intent, replica, context)

        return self.generate_answer(replica, context) or self.get_failure_phrase(replica)

    def _process_waiting_for_toy(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_TOY."""
        toy_name = extract_toy_name(replica)
        if toy_name:
            context.user_data['current_toy'] = toy_name
            context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
            sentiment = analyze_sentiment(replica)
            suffix = " –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –¥–∞? üòä" if sentiment == 'positive' else " –î–∞–≤–∞–π –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ! üòä" if sentiment == 'negative' else ""
            return f"–í—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É {toy_name}? –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{suffix}"
        toy_category = extract_toy_category(replica)
        if toy_category:
            suitable_toys = [toy for toy, data in CONFIG['toys'].items() if toy_category in data.get('categories', [])]
            if suitable_toys:
                toy_name = random.choice(suitable_toys)
                context.user_data['current_toy'] = toy_name
                context.user_data['state'] = BotState.WAITING_FOR_INTENT.value
                sentiment = analyze_sentiment(replica)
                suffix = " –í —Ö–æ—Ä–æ—à–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥—É—Ö–∞? üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º –∏–≥—Ä—É—à–∫—É! üòä" if sentiment == 'negative' else ""
                return f"–ò–∑ {toy_category} –µ—Å—Ç—å {toy_name}. –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{suffix}"
        sentiment = analyze_sentiment(replica)
        suffix = " –û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º! üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —É—Ç–æ—á–Ω–∏–º! üòä" if sentiment == 'negative' else ""
        return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—É—à–∫–∏ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.{suffix}"

    def _process_waiting_for_age(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_AGE."""
        age = extract_age(replica)
        if age:
            context.user_data['state'] = BotState.NONE.value
            return self._handle_filter_toys(age, None, None, context)
        sentiment = analyze_sentiment(replica)
        suffix = " –í —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —É—Ç–æ—á–Ω–∏–º! üòä" if sentiment == 'negative' else ""
        return f"–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, '5 –ª–µ—Ç'.{suffix}"

    def _process_waiting_for_intent(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_FOR_INTENT."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–∞ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–≥—Ä—É—à–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
        toy_name = extract_toy_name(replica)
        if toy_name and toy_name in CONFIG['toys']:
            context.user_data['current_toy'] = toy_name
        else:
            toy_name = context.user_data.get('current_toy', '–∏–≥—Ä—É—à–∫—É')

        intent = self.classify_intent(replica)
        if intent in [Intent.TOY_PRICE.value, Intent.TOY_AVAILABILITY.value, Intent.TOY_INFO.value,
                      Intent.ORDER_TOY.value]:
            context.user_data['state'] = BotState.NONE.value
            return self._get_toy_response(intent, toy_name, replica, context)
        if intent == Intent.YES.value:
            if toy_name:
                context.user_data['state'] = BotState.NONE.value
                sentiment = analyze_sentiment(replica)
                suffix = " –†–∞–¥ —Ç–≤–æ–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é! üòä" if sentiment == 'positive' else " –î–∞–≤–∞–π –ø–æ–¥–Ω–∏–º–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä" if sentiment == 'negative' else ""
                return f"–¶–µ–Ω–∞ –Ω–∞ {toy_name} ‚Äî {CONFIG['toys'][toy_name]['price']} —Ä—É–±–ª–µ–π. –ß—Ç–æ –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?{suffix}"
        if intent == Intent.NO.value:
            context.user_data['current_toy'] = None
            context.user_data['state'] = BotState.NONE.value
            sentiment = analyze_sentiment(replica)
            suffix = " –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! üòä" if sentiment == 'positive' else " –ù–µ –≥—Ä—É—Å—Ç–∏, –Ω–∞–π–¥–µ–º –¥—Ä—É–≥–æ–µ! üòä" if sentiment == 'negative' else ""
            return f"–•–æ—Ä–æ—à–æ, –∫–∞–∫—É—é –∏–≥—Ä—É—à–∫—É –æ–±—Å—É–¥–∏–º —Ç–µ–ø–µ—Ä—å?{suffix}"
        sentiment = analyze_sentiment(replica)
        suffix = " –í —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏? üòä" if sentiment == 'positive' else " –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –Ω–∞–π–¥–µ–º —á—Ç–æ-—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–µ! üòä" if sentiment == 'negative' else ""
        return f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ {toy_name}: —Ü–µ–Ω—É, –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ?{suffix}"

    def process(self, replica, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        stats = Stats(context)
        if not is_meaningful_text(replica):
            answer = self.get_failure_phrase(replica)
            self._update_context(context, replica, answer)
            stats.add(ResponseType.FAILURE.value, replica, answer, context)
            return answer

        age = extract_age(replica)
        price = extract_price(replica)
        toy_category = extract_toy_category(replica)
        if age or price:
            answer = self._handle_filter_toys(age, price, toy_category, context)
            self._update_context(context, replica, answer, Intent.FILTER_TOYS.value)
            stats.add(ResponseType.INTENT.value, replica, answer, context)
            return answer

        state = context.user_data.get('state', BotState.NONE.value)
        logger.info(
            f"Processing: replica='{replica}', state='{state}', last_intent='{context.user_data.get('last_intent')}'")

        if state == BotState.WAITING_FOR_TOY.value:
            answer = self._process_waiting_for_toy(replica, context)
        elif state == BotState.WAITING_FOR_AGE.value:
            answer = self._process_waiting_for_age(replica, context)
        elif state == BotState.WAITING_FOR_INTENT.value:
            answer = self._process_waiting_for_intent(replica, context)
        else:
            answer = self._process_none_state(replica, context)

        self._update_context(context, replica, answer)
        stats.add(ResponseType.INTENT.value if self.classify_intent(
            replica) else ResponseType.GENERATE.value if 'dialogues.txt' in answer else ResponseType.FAILURE.value,
                  replica, answer, context)
        return answer


# –ì–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
def voice_to_text(voice_file):
    recognizer = sr.Recognizer()
    try:
        import signal
        def signal_handler(signum, frame):
            raise TimeoutError("Speech recognition timed out")

        signal.signal(signal.SIGALRM, signal_handler)
        signal.alarm(5)  # –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
        audio = AudioSegment.from_ogg(voice_file)
        audio.export('voice.wav', format='wav')
        with sr.AudioFile('voice.wav') as source:
            audio_data = recognizer.record(source)
        text = recognizer.recognize_google(audio_data, language='ru-RU')
        return text
    except (sr.UnknownValueError, sr.RequestError, TimeoutError, Exception) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}\n{traceback.format_exc()}")
        return None
    finally:
        signal.alarm(0)
        if os.path.exists('voice.wav'):
            os.remove('voice.wav')


# –¢–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
def text_to_voice(text):
    if not text:
        return None
    try:
        tts = gTTS(text=text, lang='ru')
        voice_file = 'response.mp3'
        tts.save(voice_file)
        return voice_file
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}\n{traceback.format_exc()}")
        return None


# Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['start_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = Intent.HELLO.value
    await update.message.reply_text(answer)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = CONFIG['help_message']
    context.user_data['last_bot_response'] = answer
    context.user_data['last_intent'] = 'help'
    await update.message.reply_text(answer)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats = context.user_data.get('stats', {ResponseType.INTENT.value: 0, ResponseType.GENERATE.value: 0,
                                            ResponseType.FAILURE.value: 0})
    answer = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {stats[ResponseType.INTENT.value]}\n"
        f"–û—Ç–≤–µ—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤: {stats[ResponseType.GENERATE.value]}\n"
        f"–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats[ResponseType.FAILURE.value]}"
    )
    await update.message.reply_text(answer)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    if not user_text:
        answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
        return
    bot = context.bot_data.setdefault('bot', Bot())
    answer = bot.process(user_text, context)
    await update.message.reply_text(answer)


async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    bot = context.bot_data.setdefault('bot', Bot())
    try:
        voice_file = await context.bot.get_file(voice.file_id)
        await voice_file.download_to_drive('voice.ogg')
        text = voice_to_text('voice.ogg')
        if text:
            answer = bot.process(text, context)
            voice_response = text_to_voice(answer)
            if voice_response:
                with open(voice_response, 'rb') as audio:
                    await update.message.reply_voice(audio)
                os.remove(voice_response)
            else:
                await update.message.reply_text(answer)
        else:
            answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            context.user_data['last_bot_response'] = answer
            await update.message.reply_text(answer)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}\n{traceback.format_exc()}")
        answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        context.user_data['last_bot_response'] = answer
        await update.message.reply_text(answer)
    finally:
        if os.path.exists('voice.ogg'):
            os.remove('voice.ogg')


def run_bot():
    if not TOKEN:
        raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()


if __name__ == '__main__':
    run_bot()
